import { createSlice } from "@reduxjs/toolkit";
import axios from "axios";
import toast from "react-hot-toast";

// --- Safe localStorage getters ---
let accessToken = localStorage.getItem("access_token");
let refreshToken = localStorage.getItem("refresh_token");
let user = null;

try {
  const storedUser = localStorage.getItem("user");
  if (storedUser && storedUser !== "undefined" && storedUser !== "null") {
    user = JSON.parse(storedUser);
  }
} catch (e) {
  user = null;
}

const initialState = {
  accessToken: accessToken || null,
  refreshToken: refreshToken || null,
  user: user || null,
  loading: false,
  error: null,
};

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    start(state) {
      state.loading = true;
      state.error = null;
    },
    loginSuccess(state, action) {
      state.loading = false;
      state.accessToken = action.payload.accessToken;
      state.refreshToken = action.payload.refreshToken || state.refreshToken;
      state.user = action.payload.user;

      localStorage.setItem("access_token", state.accessToken);
      localStorage.setItem("refresh_token", state.refreshToken);
      localStorage.setItem("user", JSON.stringify(state.user));
    },
    logout(state) {
      state.accessToken = null;
      state.refreshToken = null;
      state.user = null;
      state.loading = false;
      localStorage.clear();
    },
    failure(state, action) {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

export const { start, loginSuccess, logout, failure } = authSlice.actions;

// Fetch user info
export const fetchUser = (accessToken,refreshToken) => async (dispatch, getState) => {
  try {
    // const { accessToken, refreshToken } = getState().auth;
    if (!accessToken) return;
    // let accessToken = localStorage.getItem("access_token");
    // let refreshToken = localStorage.getItem("refresh_token");
    console.log("Access token", accessToken);
    if (!accessToken) return;

    const res = await axios.get("http://127.0.0.1:8000/auth/me", {
      headers: { Authorization: `Bearer ${accessToken}` },
    });
    dispatch(loginSuccess({ accessToken, refreshToken, user: res.data }));
  } catch (err) {
    console.error("Fetch user error:", err);
    dispatch(logout());
  }
};

// LOGIN
export const login = (formData) => async (dispatch) => {
  dispatch(start());
  try {
    const res = await axios.post("http://127.0.0.1:8000/auth/login", formData);
    // console.log("RES in login", res);
    // Save tokens
    localStorage.setItem("access_token", res.data.access_token);
    localStorage.setItem("refresh_token", res.data.refresh_token);

    // Fetch user info and navigate
    await dispatch(fetchUser(res.data.access_token,res.data.refresh_token));

    return { meta: { requestStatus: "fulfilled" } };
  } catch (err) {
    dispatch(failure(err.response?.data?.detail || "Login failed"));
    return { meta: { requestStatus: "rejected" } };
  }
};

// SIGNUP
export const signup = (formData, navigate) => async (dispatch) => {
  dispatch(start());
  try {
    const res = await axios.post("http://127.0.0.1:8000/auth/signup", formData);

    await dispatch(fetchUser(navigate));
    return { ok: true };
  } catch (err) {
    dispatch(failure(err.response?.data?.detail || "Signup failed"));
    return { ok: false };
  }
};

// Refresh token
export const refreshTokenThunk = () => async (dispatch, getState) => {
  const { refreshToken, user } = getState().auth;

  if (!refreshToken) {
    dispatch(logout());
    toast.error("No refresh token, please login again.");

    return { type: "auth/logout" };
  }

  try {
    const res = await axios.post(
      "http://127.0.0.1:8000/auth/refresh",
      {},
      { headers: { Authorization: `Bearer ${refreshToken}` } }
    );
    if (!res.data.access_token) throw new Error("No new access token returned");
    console.log(
      "acess token generated by refreash token is",
      res.data.access_token
    );
    dispatch(
      loginSuccess({
        accessToken: res.data.access_token,
        refreshToken, // keep the same refresh token
        user,
      })
    );
    toast.success("Session refreshed.");

    return { type: "auth/loginSuccess" };
  } catch (err) {
    console.error("Refresh token failed", err);
    dispatch(logout());
    return { type: "auth/logout" };
  }
};

export default authSlice.reducer;
